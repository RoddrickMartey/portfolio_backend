generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade, map: "Comment_projectId_fkey")

  @@index([projectId], map: "Comment_projectId_fkey")
}

model downloadlog {
  id           Int      @id @default(autoincrement())
  fileUrl      String
  ipAddress    String
  userAgent    String
  downloadedAt DateTime @default(now())
}

model phonenumber {
  id        Int      @id @default(autoincrement())
  number    String   @unique(map: "PhoneNumber_number_key")
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "PhoneNumber_userId_fkey")

  @@index([userId], map: "PhoneNumber_userId_fkey")
}

model project {
  id          Int              @id @default(autoincrement())
  title       String
  description String           @db.LongText
  category    project_category
  link        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime
  comment     comment[]
  screenshot  screenshot[]
  techstack   techstack[]      @relation("projecttechstacks")
}

model screenshot {
  id        Int      @id @default(autoincrement())
  url       String
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade, map: "Screenshot_projectId_fkey")

  @@index([projectId], map: "Screenshot_projectId_fkey")
}

model skill {
  id        Int      @id @default(autoincrement())
  skill     String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Skill_userId_fkey")

  @@index([userId], map: "Skill_userId_fkey")
}

model sociallink {
  id        Int      @id @default(autoincrement())
  platform  String
  url       String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "SocialLink_userId_fkey")

  @@index([userId], map: "SocialLink_userId_fkey")
}

model techstack {
  id        Int                @id @default(autoincrement())
  category  techstack_category
  skill     String
  createdAt DateTime           @default(now())
  updatedAt DateTime            @updatedAt
  project   project[]          @relation("projecttechstacks")
}

model user {
  id          Int           @id @default(autoincrement())
  name        String
  username    String
  password    String
  email       String        @unique(map: "User_email_key")
  resume      String
  bio         String        @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  phonenumber phonenumber[]
  skill       skill[]
  sociallink  sociallink[]
}

model visitor {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "Visitor_token_key")
  userAgent String
  ipAddress String
  visitDate DateTime @default(now())
}

enum techstack_category {
  FRONTEND
  BACKEND
  DATABASE
  DEVOPS
  MOBILE
  TOOLS
  TESTING
  DESIGN
  OFFICE
  OTHER
}

enum project_category {
  PERSONAL
  CLIENT
  SCHOOL
  WORK
  HACKATHON
  OPEN_SOURCE
  FREELANCE
  OTHER
}
